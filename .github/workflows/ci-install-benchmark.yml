# Bench yarn with compression vs without + action/cache
name: 'Install benchmarks'
on: [push, workflow_dispatch]

env:
  PRISMA_SKIP_POSTINSTALL_GENERATE: 'true'
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 'true'
  HUSKY: '0'

jobs:
  install-bench:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # not needed outside benchmarks
      - name: ‚öô To ease benchmarks and detection of YARN_RC_FILENAME
        run: corepack enable

      - name: ‚ôª Setup yarn cache (no-compress)
        uses: actions/cache@v4
        id: yarn-benchmark-cache-no-compress
        with:
          path: ./.yarn/benchmark-cache/no-compress
          key: yarn-benchmark-cache-no-compress-v2-${{ hashFiles('yarn.no-compress.lock') }}
          restore-keys: |
            yarn-benchmark-cache-no-compress-v2-

      - name: ‚ôª Setup yarn cache (mixed-compress)
        uses: actions/cache@v4
        id: yarn-benchmark-cache-mixed-compress
        with:
          path: ./.yarn/benchmark-cache/mixed-compress
          key: yarn-benchmark-cache-mixed-compress-v2-${{ hashFiles('yarn.mixed-compress.lock') }}
          restore-keys: |
            yarn-benchmark-cache-mixed-compress-v2-

      # PNPM does not rotate the cache (store) like Yarn. When the lock change new packages will
      # be added, older won't be removed and so the action/cache storage will grow over time.
      # The cache-rotation.YEAR_MONTH allows to invalidate after a period.
      - name: ‚öô Cache rotation keys for pnpm (yarn does not need it as it rotates the cache)
        id: cache-rotation
        run: echo "YEAR_MONTH=$(/bin/date -u "+%Y%m")" >> $GITHUB_OUTPUT

      - name: ‚öô Install pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 8.6.0

      - name: ‚öô Expose pnpm config(s) through "$GITHUB_OUTPUT"
        id: pnpm-config
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # PNPM store seems OS / Architecture dependent while Yarn cache isn't. If the action runs on Win/Mac/Linux
      # you'll have 3 caches
      - name: ‚ôª Setup pnpm cache
        uses: actions/cache@v4
        id: pnpm-benchmark-store-cache
        with:
          path: ${{ steps.pnpm-config.outputs.PNPM_STORE_PATH }}
          key: ${{ runner.os }}-pnpm-benchmark-store-cache-${{ steps.cache-rotation.outputs.YEAR_MONTH }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-benchmark-store-cache-${{ steps.cache-rotation.outputs.YEAR_MONTH }}-

      - name: üì• ‚ôªÔ∏è Yarn install [CACHE ON | MIXED COMPRESSION]
        run: yarn install --immutable --inline-builds
        env:
          YARN_RC_FILENAME: .yarnrc.mixed-compress.yml
          YARN_ENABLE_GLOBAL_CACHE: 'false'
          YARN_ENABLE_MIRROR: 'false'
          YARN_CACHE_FOLDER: .yarn/benchmark-cache/mixed-compress
          YARN_INSTALL_STATE_PATH: .yarn/install-state-mixed-compress.gz

      - name: üßπ Cleanup workspace
        run: |
          npx -y rimraf@5.0.5 --glob "**/node_modules" ".yarn/install-state*.gz"
          yarn cache clean --mirror
          npm cache clean --force
          ls -la .yarn/benchmark-cache

      - name: üì• ‚ôªÔ∏è Yarn install [CACHE ON | NO COMPRESS]
        run: yarn install --immutable --inline-builds
        env:
          YARN_RC_FILENAME: '.yarnrc.no-compress.yml'
          YARN_ENABLE_GLOBAL_CACHE: 'false'
          YARN_ENABLE_MIRROR: 'false'
          YARN_CACHE_FOLDER: '.yarn/benchmark-cache/no-compress'
          YARN_INSTALL_STATE_PATH: .yarn/install-state-no-compress.gz

      - name: üßπ Cleanup workspace
        run: |
          ls -la .yarn/benchmark-cache
          npx -y rimraf@5.0.5 --glob "**/node_modules" ".yarn/install-state*.gz"
          yarn cache clean --mirror
          npm cache clean --force
          ls -la .yarn/benchmark-cache

      - name: üì• Yarn install [CACHE OFF | MIXED COMPRESSION]
        run: yarn install --immutable --inline-builds
        env:
          YARN_RC_FILENAME: '.yarnrc.mixed-compress.yml'
          YARN_ENABLE_GLOBAL_CACHE: 'false'
          YARN_ENABLE_MIRROR: 'false'
          YARN_CACHE_FOLDER: '.yarn/benchmark-cache/no-compress'
          YARN_INSTALL_STATE_PATH: .yarn/install-state-no-cache.gz

      - name: üßπ Cleanup workspace
        run: |
          npx -y rimraf@5.0.5 --glob "**/node_modules" ".yarn/install-state*.gz"
          yarn cache clean --mirror
          npm cache clean --force

      - name: üì• Yarn install [CACHE OFF | NO COMPRESSION]
        run: yarn install --immutable --inline-builds
        env:
          YARN_RC_FILENAME: '.yarnrc.no-compress.yml'
          YARN_ENABLE_GLOBAL_CACHE: 'false'
          YARN_ENABLE_MIRROR: 'false'
          YARN_CACHE_FOLDER: '.yarn/benchmark-cache/no-cache-no-comp'
          YARN_INSTALL_STATE_PATH: .yarn/install-state-no-cache-no-compress.gz

      - name: üßπ Cleanup workspace
        run: |
          npx -y rimraf@5.0.5 --glob "**/node_modules" ".yarn/install-state*.gz"
          yarn cache clean --mirror
          npm cache clean --force

      - name: üì• ‚ôªÔ∏è PNPM install [CACHE ON]
        shell: bash
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: üßπ Cleanup workspace
        run: |
          npx -y rimraf@5.0.5 --glob "**/node_modules" ".yarn/install-state*.gz"
          yarn cache clean --mirror
          npm cache clean --force

      - name: üì• PNPM install [CACHE OFF]
        shell: bash
        run: pnpm install --store-dir ./node_modules/.pnpm-global-store --frozen-lockfile --prefer-offline


      - name: üßπ Cleanup workspace
        run: |
          npx -y rimraf@5.0.5 --glob "**/node_modules" ".yarn/install-state*.gz"
          yarn cache clean --mirror
          npm cache clean --force

      - name: ‚ôª Setup yarn pnp cache (no-compress)
        uses: actions/cache@v4
        id: yarn-pnp-benchmark-cache-no-compress
        with:
          path: ./.yarn/benchmark-cache/pnp-no-compress
          key: yarn-pnp-benchmark-cache-no-compress-${{ hashFiles('yarn.pnp.no-compress.lock', '.pnp*') }}
          restore-keys: |
            yarn-pnp-benchmark-cache-no-compress

      - name: üì• Yarn install P'n'P [CACHE ON | NO COMPRESS]
        run: yarn install --immutable --inline-builds
        continue-on-error: true
        env:
          YARN_ENABLE_GLOBAL_CACHE: 'false'
          YARN_ENABLE_MIRROR: 'false'
          YARN_NODE_LINKER: 'pnp'
          YARN_NM_MODE: 'hardlinks-local'
          YARN_CACHE_FOLDER: '.yarn/benchmark-pnp-cache/no-compress'
          YARN_LOCKFILE_FILENAME: 'yarn.pnp.lock'
          YARN_COMPRESSION_LEVEL: '0'
          YARN_INSTALL_STATE_PATH: .yarn/install-state-pnp-no-compress.gz
